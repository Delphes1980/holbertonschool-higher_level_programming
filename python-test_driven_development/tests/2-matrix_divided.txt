>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Standard cases
>>> matrix_divided([[1, 2], [4, 6]], 2)
[[0.5, 1.0], [2.0, 3.0]]

>>> matrix_divided([[2.6, 3, 8], [6.8, 9, 12]], 3)
[[0.87, 1.0, 2.67], [2.27, 3.0, 4.0]]

>>> matrix_divided([[26, 96], [652, 984]], -6)
[[-4.33, -16.0], [-108.67, -164.0]]

>>> matrix_divided([[-36, 6], [63, -4]], 4)
[[-9.0, 1.5], [15.75, -1.0]]

>>> matrix_divided([[2, 4], [6, 8]], 2.4)
[[0.83, 1.67], [2.5, 3.33]]

# Edge cases
>>> matrix_divided([[], [2, 2.6]], 4)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([["hello", 2], [56, 152]], 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([("hello", "world"), [5.6, 94]], 7)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(((3.68, 74), (56.3, 65547)), 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[215, 58, 68], [36, 536.78, 9648]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([])
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided([[2, 5], [2, 8]], "2")
Traceback (most recent call last):
...
TypeError: div must be a number
